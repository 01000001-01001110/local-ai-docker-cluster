# Main docker-compose.yml file for the AI development environment
# This file orchestrates several services that work together to provide
# a comprehensive AI development platform

# Define all the persistent storage volumes needed by our services
volumes:
  n8n_storage:          # Stores n8n workflows and data
  postgres_storage:     # Stores the PostgreSQL database
  ollama_storage:       # Stores Ollama models and configurations
  qdrant_storage:       # Stores vector embeddings
  open-webui:          # Stores Open WebUI configurations
  flowise:             # Stores Flowise workflows and data

# Define the main network our services will use to communicate
networks:
  demo:
    name: local_ai_server_demo
    driver: bridge

# Base configuration for n8n services that will be reused
x-n8n: &service-n8n
  image: n8nio/n8n:latest
  networks: ['demo']
  environment:
    - DB_TYPE=postgresdb
    - DB_POSTGRESDB_HOST=postgres
    - DB_POSTGRESDB_USER=${POSTGRES_USER}
    - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
    - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
    - N8N_DIAGNOSTICS_ENABLED=false
    - N8N_PERSONALIZATION_ENABLED=false
    - N8N_ENCRYPTION_KEY
    - N8N_USER_MANAGEMENT_JWT_SECRET
    - N8N_USER_MANAGEMENT_DISABLED=true
    - NODE_ENV=production
  links:
    - postgres

# Base configuration for Ollama services
x-ollama: &service-ollama
  image: ollama/ollama:latest
  container_name: ollama
  networks: ['demo']
  restart: unless-stopped
  ports:
    - 11434:11434
  volumes:
    - ollama_storage:/root/.ollama

# Configuration for initializing Ollama with required models
x-init-ollama: &init-ollama
  image: ollama/ollama:latest
  networks: ['demo']
  container_name: ollama-pull-llama
  volumes:
    - ollama_storage:/root/.ollama
  entrypoint: /bin/sh
  command:
    - "-c"
    - "sleep 3; OLLAMA_HOST=ollama:11434 ollama pull llama3.1; OLLAMA_HOST=ollama:11434 ollama pull nomic-embed-text"

# Main services section defining all our containers
services:
  # Flowise - Low code AI flow builder
  flowise:
    image: flowiseai/flowise
    networks: ['demo']
    restart: unless-stopped
    container_name: flowise
    environment:
        - PORT=3001
        - FLOWISE_DATA_PATH=/root/.flowise
        - FLOWISE_STORAGE_PATH=/root/.flowise-storage
    ports:
        - 3001:3001
    extra_hosts:
      - "host.docker.internal:host-gateway"        
    volumes:
        - ./flowise/data:/root/.flowise
        - ./flowise/storage:/root/.flowise-storage
    entrypoint: /bin/sh -c "sleep 3; flowise start"

  # Open WebUI - Interface for interacting with AI models
  open-webui:
    image: ghcr.io/open-webui/open-webui:main
    networks: ['demo']
    restart: unless-stopped
    container_name: open-webui
    ports:
      - "3000:8080"
    extra_hosts:
      - "host.docker.internal:host-gateway"
    volumes:
      - open-webui:/app/backend/data

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 5432:5432
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - POSTGRES_DB
    volumes:
      - postgres_storage:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -h localhost -U ${POSTGRES_USER} -d ${POSTGRES_DB}']
      interval: 5s
      timeout: 5s
      retries: 10

  # n8n Workflow Importer
  n8n-import:
    <<: *service-n8n
    container_name: n8n-import
    entrypoint: /bin/sh
    command:
      - "-c"
      - "sleep 10 && n8n import:credentials --separate --input=/backup/credentials && n8n import:workflow --separate --input=/backup/workflows"
    volumes:
      - ./n8n/backup:/backup
    depends_on:
      postgres:
        condition: service_healthy

  # Main n8n Service
  n8n:
    <<: *service-n8n
    container_name: n8n
    restart: unless-stopped
    ports:
      - 5678:5678
    volumes:
      - n8n_storage:/home/node/.n8n
      - ./n8n/backup:/backup
      - ./shared:/data/shared
    environment:
      - DB_TYPE=postgresdb
      - DB_POSTGRESDB_HOST=postgres
      - DB_POSTGRESDB_USER=${POSTGRES_USER}
      - DB_POSTGRESDB_PASSWORD=${POSTGRES_PASSWORD}
      - DB_POSTGRESDB_DATABASE=${POSTGRES_DB}
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_ENCRYPTION_KEY
      - N8N_USER_MANAGEMENT_JWT_SECRET
      - N8N_USER_MANAGEMENT_DISABLED=true
      - NODE_ENV=production
    networks:
      - demo
    depends_on:
      postgres:
        condition: service_healthy
      n8n-import:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "wget", "--spider", "http://localhost:5678"]
      interval: 10s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant
    container_name: qdrant
    networks: ['demo']
    restart: unless-stopped
    ports:
      - 6333:6333
    volumes:
      - qdrant_storage:/qdrant/storage

  # Ollama CPU Version
  ollama-cpu:
    profiles: ["cpu"]
    <<: *service-ollama

  # Ollama GPU Version
  ollama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *service-ollama
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Initialize Ollama Models (CPU)
  ollama-pull-llama-cpu:
    profiles: ["cpu"]
    <<: *init-ollama
    depends_on:
      - ollama-cpu

  # Initialize Ollama Models (GPU)
  ollama-pull-llama-gpu:
    profiles: ["gpu-nvidia"]
    <<: *init-ollama
    depends_on:
      - ollama-gpu